#include<iostream>
using namespace std;

void merge(int arr[], int left, int mid, int right) {
    int i = left;
    int j = mid + 1;
    int k = 0;
    int temp[100];
    int zeroCount = 0;

    while (i <= mid && j <= right) {
        if (arr[i] == 0) {
            i++;
            zeroCount++;
        } else if (arr[j] == 0) {
            j++;
            zeroCount++;
        } else if (arr[i] < arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }

        while (i <= mid) {
        if (arr[i] != 0)
            temp[k++] = arr[i];
        else
            zeroCount++;
        i++;
    }

       while (j <= right) {
        if (arr[j] != 0)
            temp[k++] = arr[j];
        else
            zeroCount++;
        j++;
    }

    // Add zeroes at the end
    while (zeroCount--)
        temp[k++] = 0;

    // Copy back to original array
    for (int t = 0; t < k; t++)
        arr[left + t] = temp[t];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = (left + right) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[] = {2, 0, 4, 0, 6, 8, 0, 12, 15, 0, 17};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original Array: ";
    printArray(arr, n);

    mergeSort(arr, 0, n - 1);

    cout << "Array after moving zeroes to the end (with sorting non-zero): ";
    printArray(arr, n);

 return 0;
}
